<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xmlns:beans="http://www.springframework.org/schema/beans"
			 xmlns:context="http://www.springframework.org/schema/context"
			 xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet 컨텍스트: 이 서블릿의 요청 처리 인프라를 정의합니다. -->

	<!-- Spring MVC의 @Controller 프로그래밍 모델을 활성화합니다.(수동으로 할 필요 없어짐) -->
	<annotation-driven />

	<!-- /resources/**로 시작하는 HTTP GET 요청을 처리하여 ${webappRoot}/resources 디렉토리에서 정적 자원을 효율적으로 제공합니다. -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- /static/**로 시작하는 HTTP GET 요청을 처리하여 ${webappRoot}/static 디렉토리에서 정적 자원을 제공합니다. -->
	<resources mapping="/static/**" location="/static/" />

	<!-- @Controller에서 선택된 뷰를 /WEB-INF/views 디렉토리 내의 .jsp 파일로 매핑하여 렌더링을 처리합니다. -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<!-- com.yorizip.myapp 패키지와 그 하위 패키지에서 @Component, @Service, @Repository, @Controller 어노테이션이 붙은 클래스를 스캔합니다. -->
	<context:component-scan base-package="com.yorizip.myapp" />


</beans:beans>